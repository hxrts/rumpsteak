[package]
name = "rumpsteak-choreography"
version = "0.1.1-aura"
authors = ["Zak Cutner <me@zakcutner.uk>", "Aura Team"]
edition = "2021"
rust-version = "1.75"
description = "Choreographic programming for Rumpsteak - effect-based distributed protocols"
readme = "../README.md"
repository = "https://github.com/aura-project/rumpsteak-aura"
license = "MIT OR Apache-2.0"
keywords = ["choreography", "session", "types", "effects"]
categories = ["asynchronous", "concurrency"]

[lib]
bench = false

[dependencies]
rumpsteak-aura = { path = ".." }
rumpsteak-macros = { path = "../macros" }
futures = { workspace = true }
async-trait = { workspace = true }
async-recursion = { workspace = true }
serde = { workspace = true }
tracing = { workspace = true }
anyhow = { workspace = true }
thiserror = { workspace = true }
proc-macro2 = { workspace = true }
quote = { workspace = true }
syn = { workspace = true }
bincode = { workspace = true }
time = { workspace = true }
base64 = { workspace = true }
hex = { workspace = true }
uuid = { workspace = true }
pest = { workspace = true }
pest_derive = { workspace = true }

# Optional dependencies
rand = { workspace = true, optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { workspace = true }
wasm-bindgen-futures = { workspace = true }
wasm-timer = { workspace = true }
getrandom = { workspace = true }

[dev-dependencies]
criterion = { workspace = true }
proptest = { workspace = true }
tempfile = { workspace = true }
tracing-subscriber = { workspace = true }
tokio = { workspace = true, features = ["full"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3"

[features]
default = []
test-utils = ["rand"]
wasm = ["getrandom/js"]

[[bench]]
name = "choreography_bench"
harness = false

[[bench]]
name = "rumpsteak_handler_bench"
harness = false